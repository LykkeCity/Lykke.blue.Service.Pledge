// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Pledges.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PledgesAPI.
    /// </summary>
    public static partial class PledgesAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IPledgesAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IPledgesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update pledge details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge values we wanna change.
            /// </param>
            public static UpdatePledgeResponse UpdatePledge(this IPledgesAPI operations, UpdatePledgeRequest request = default(UpdatePledgeRequest))
            {
                return operations.UpdatePledgeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update pledge details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge values we wanna change.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatePledgeResponse> UpdatePledgeAsync(this IPledgesAPI operations, UpdatePledgeRequest request = default(UpdatePledgeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePledgeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static CreatePledgeResponse CreatePledge(this IPledgesAPI operations, CreatePledgeRequest request = default(CreatePledgeRequest))
            {
                return operations.CreatePledgeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreatePledgeResponse> CreatePledgeAsync(this IPledgesAPI operations, CreatePledgeRequest request = default(CreatePledgeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePledgeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the pledge we wanna find.
            /// </param>
            public static GetPledgeResponse GetPledge(this IPledgesAPI operations, string id)
            {
                return operations.GetPledgeAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the pledge we wanna find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPledgeResponse> GetPledgeAsync(this IPledgesAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPledgeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete pledge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the pledge we wanna delete.
            /// </param>
            public static void DeletePledge(this IPledgesAPI operations, string id)
            {
                operations.DeletePledgeAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete pledge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the pledge we wanna delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePledgeAsync(this IPledgesAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePledgeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get pledges for provided client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the client we wanna get pledges for.
            /// </param>
            public static IList<GetPledgeResponse> GetPledgesByClientId(this IPledgesAPI operations, string id)
            {
                return operations.GetPledgesByClientIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get pledges for provided client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the client we wanna get pledges for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetPledgeResponse>> GetPledgesByClientIdAsync(this IPledgesAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPledgesByClientIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
